#!/usr/bin/env ruby

require 'httparty'
require 'rufus-scheduler'
require 'logger'

class Backup
  include HTTParty
  format :json

  def initialize(dsm, username, password, verify_ssl = true)
    self.class.base_uri dsm
    if !verify_ssl
      self.class.default_options.update(verify: false)
    end
    @sid = login(username, password)
  end

  def login(username, password)
    params = {
      api: 'SYNO.API.Auth',
      version: 3,
      method: 'login',
      account: username,
      passwd: password,
      session: 'sessionName',
      format: 'sid'
    }

    response = self.class.get('/webapi/auth.cgi', query: params)

    return response.parsed_response['data']['sid']
  end

  def logout
    params = {
      api: 'SYNO.API.Auth',
      version: 3,
      method: 'logout',
      session: 'sessionName',
    }

    self.class.get('/webapi/auth.cgi', query: params)
  end

  def tasks
    params = {
      additional: '["last_bkp_result"]',
      api: 'SYNO.Backup.Task',
      version: 1,
      method: 'list',
      sessionName: 'sessionName',
      _sid: @sid,
    }

    response = self.class.get('/webapi/entry.cgi', query: params)

    response.parsed_response['data']['task_list']
  end

  def suspend(task_id)
    params = {
      api: 'SYNO.Backup.Task',
      version: 1,
      method: 'suspend',
      task_state: 'backupable',
      sessionName: 'sessionName',
      _sid: @sid,
      task_id: task_id,
    }

    self.class.get('/webapi/entry.cgi', query: params).parsed_response
  end

  def resume(task_id)
    params = {
      api: 'SYNO.Backup.Task',
      version: 1,
      method: 'resume',
      sessionName: 'sessionName',
      _sid: @sid,
      task_id: task_id,
    }

    self.class.get('/webapi/entry.cgi', query: params).parsed_response
  end
end


dsm = ENV['DSM']
username = ENV['USERNAME']
password = ENV['PASSWORD']
verify_ssl = !(ENV['VERIFY_SSL'] == 'false')
frequency = ENV['FREQUENCY'] || '15'

logger = Logger.new('/var/log/synobackup.log')
logger.level = Logger::DEBUG

logger.debug("Connecting to #{dsm}")
logger.debug("Current time: #{Time.now}")

backup = Backup.new(dsm, username, password, verify_ssl)

scheduler = Rufus::Scheduler.new

scheduler.every(frequency+'m') do
  logger.debug('Checking backup tasks')

  tasks = backup.tasks
  tasks = tasks.select {|t| t['last_bkp_result'] == 'suspend' }

  tasks.each do |task|
    logger.debug("resuming #{task['name']}")
    response = backup.resume task['task_id']
    logger.debug(response)
  end
end

scheduler.join
